2 + 2
2 + 2
setwd("E:/Documentos/EngSoft/Cursos/Data Science Academy/Microsoft Power BI para Data Science/Projetos/Capitulo_15")
getwd()
library(Amelia)
library(ggplot2)
library(caret)
library(reshape)
library(randomForest)
library(dplyr)
library(e1071)
dados_clientes <- read.csv("dataset.csv")
View(dados_clientes)
dim(dados_clientes)
str(dados_clientes)
dados_clientes$ID <- NULL
dim(dados_clientes)
View(dados_clientes)
colnames(dados_clientes)
colnames(dados_clientes)[24] <- "inadimplente"
colnames(dados_clientes)
View(dados_clientes)
sapply(dados_clientes, function(x) sum(is.na(x)))
?missmap
missmap(dados_clientes, main = "Valores Missing Observados")
dados_clientes <- na.omit(dados_clientes)
str(dados_clientes)
colnames(dados_clientes)
colnames(dados_clientes)[2] <- "Genero"
colnames(dados_clientes)[3] <- "Escolaridade"
colnames(dados_clientes)[4] <- "Estado_Civil"
colnames(dados_clientes)[5] <- "Idade"
colnames(dados_clientes)
View(dados_clientes$Genero)
str(dados_clientes$Genero)
summary(dados_clientes$Genero)
?cut
dados_clientes$Genero <- cut(dados_clientes$Genero,
c(0,1,2),
labels = c("Masculino",
"Feminino"))
View(dados_clientes$Genero)
str(dados_clientes$Genero)
summary(dados_clientes$Genero)
str(dados_clientes$Escolaridade)
summary(dados_clientes$Escolaridade)
dados_clientes$Escolaridade <- cut(dados_clientes$Escolaridade,
c(0,1,2,3,4),
labels = c("Pos Graduado",
"Graduado",
"Ensino Medio",
"Outros"))
View(dados_clientes$Escolaridade)
str(dados_clientes$Escolaridade)
summary(dados_clientes$Escolaridade)
str(dados_clientes$Estado_Civil)
summary(dados_clientes$Estado_Civil)
dados_clientes$Estado_Civil <- cut(dados_clientes$Estado_Civil,
c(-1,0,1,2,3),
labels = c("Desconhecido",
"Casado",
"Solteiro",
"Outro"))
View(dados_clientes$Estado_Civil)
str(dados_clientes$Estado_Civil)
summary(dados_clientes$Estado_Civil)
str(dados_clientes$Idade)
summary(dados_clientes$Idade)
hist(dados_clientes$Idade)
dados_clientes$Idade <- cut(dados_clientes$Idade,
c(0,30,50,100),
labels = c("Jovem",
"Adulto",
"Idoso"))
View(dados_clientes$Idade)
str(dados_clientes$Idade)
summary(dados_clientes$Idade)
View(dados_clientes)
dados_clientes$PAY_0 <- as.factor(dados_clientes$PAY_0)
dados_clientes$PAY_2 <- as.factor(dados_clientes$PAY_2)
dados_clientes$PAY_3 <- as.factor(dados_clientes$PAY_3)
dados_clientes$PAY_4 <- as.factor(dados_clientes$PAY_4)
dados_clientes$PAY_5 <- as.factor(dados_clientes$PAY_5)
dados_clientes$PAY_6 <- as.factor(dados_clientes$PAY_6)
str(dados_clientes)
sapply(dados_clientes, function(x) sum(is.na(x)))
missmap(dados_clientes, main = "Valores Missing Observados")
dados_clientes <- na.omit(dados_clientes)
missmap(dados_clientes, main = "Valores Missing Observados")
View(dados_clientes)
str(dados_clientes$inadimplente)
colnames(dados_clientes)
dados_clientes$inadimplente <- as.factor(dados_clientes$inadimplente)
str(dados_clientes$inadimplente)
View(dados_clientes)
?table
table(dados_clientes$inadimplente)
prop.table(table(dados_clientes$inadimplente))
qplot(inadimplente, data = dados_clientes, geom = "bar") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
set.seed(12345)
?createDataPartition
indice <- createDataPartition(dados_clientes$inadimplente, p = 0.75, list = FALSE)
dim(indice)
dados_treino <- dados_clientes[indice,]
dim(dados_treino)
table(dados_treino$inadimplente)
prop.table(table(dados_treino$inadimplente))
dim(dados_treino)
compara_dados <- cbind(prop.table(table(dados_treino$inadimplente)),
prop.table(table(dados_clientes$inadimplente)))
colnames(compara_dados) <- c("Treinamento", "Original")
compara_dados
?reshape2::melt
melt_compara_dados <- melt(compara_dados)
melt_compara_dados
ggplot(melt_compara_dados, aes(x = X1, y = value)) +
geom_bar( aes(fill = X2), stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dados_teste <- dados_clientes[-indice,]
dim(dados_teste)
dim(dados_treino)
?randomForest
View(dados_treino)
modelo_v1 <- randomForest(inadimplente ~ ., data = dados_treino)
modelo_v1
plot(modelo_v1)
previsoes_v1 <- predict(modelo_v1, dados_teste)
?caret::confusionMatrix
cm_v1 <- caret::confusionMatrix(previsoes_v1, dados_teste$inadimplente, positive = "1")
cm_v1
y <- dados_teste$inadimplente
y_pred_v1 <- previsoes_v1
precision <- posPredValue(y_pred_v1, y)
precision
recall <- sensitivity(y_pred_v1, y)
recall
F1 <- (2 * precision * recall) / (precision + recall)
F1
install.packages("DMwR")
library(DMwR)
?SMOTE
table(dados_treino$inadimplente)
prop.table(table(dados_treino$inadimplente))
set.seed(9560)
dados_treino_bal <- SMOTE(inadimplente ~ ., data  = dados_treino)
table(dados_treino_bal$inadimplente)
prop.table(table(dados_treino_bal$inadimplente))
install.packages("DMwR")
install.packages("smotefamily")
library(smotefamily)
table(dados_treino$inadimplente)
prop.table(table(dados_treino$inadimplente))
set.seed(9560)
dados_treino_bal <- SMOTE(inadimplente ~ ., data  = dados_treino)
table(dados_treino_bal$inadimplente)
prop.table(table(dados_treino_bal$inadimplente))
install.packages("DMwR")
install.packages('abind')
install.packages('zoo')
install.packages('xts')
install.packages('quantmod')
install.packages('ROCR')
install.packages("DMwR")
table(dados_treino$inadimplente)
prop.table(table(dados_treino$inadimplente))
set.seed(9560)
dados_treino_bal <- SMOTE(inadimplente ~ ., data  = dados_treino)
table(dados_treino_bal$inadimplente)
prop.table(table(dados_treino_bal$inadimplente))
?SMOTE
library(smotefamily)
install.packages("smotefamily")
install.packages("smotefamily")
library(smotefamily)
#*****************************************************************************
#
#               Microsoft Power BI Para Data Science, VersÃo 2.0
#
#                               Data Science Academy
#
#                                   Mini-Projeto 4
#
#         Prevendo a Inadimplência de Clientes com Machine Learning e Power BI
#
#*****************************************************************************
# Definindo a pasta de trabalho
setwd("E:/Documentos/EngSoft/Cursos/Data Science Academy/Microsoft Power BI para Data Science/Projetos/Capitulo_15")
getwd()
# DefiniÃ§Ã£o do Problema
# Leio o manual em pdf no Capitulo 15 do curso como a definição do problema
# Instalando os pacotes para o projeto
# Obs: os pacotes precisam ser instalados apenas uma vez
install.packages("Amelia")
install.packages("caret")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("reshape")
